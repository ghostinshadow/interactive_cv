= stylesheet_link_tag "ol"
= stylesheet_link_tag "layers"
.flashes
%br
%h3
  = "Geo Information System"
%h4.col-md-offset-5
  %a{"href" => "http://www.diva-gis.org/gdata", "class" => "with_decoration"}= "Gis data for test pupose"
%br
.container-fluid.map-container
  .row
    .col-sm-12.col-md-12.nopadding
      #map
%br
= link_to t('open_layers.add_one'), new_open_layer_path, remote: true, class: 'btn btn-info pull-right'
%br
%h4
  = "OpenLayers"
%br
#webix_table{style: 'width: 100%; height: 50%; margin: 20px 0;'}
#open_layers_pagination

= render 'webix_table'
- data = OpenLayer.imported_layers

:javascript

  var url = '/geoserver/wfs?';
  var srsName = 'EPSG:3857';
  var geometryName = 'the_geom';
  var geometryType = 'MultiLineString';
  var outputFormat = 'application/json';
  var zoom = 9;

  
  var layers_opts = #{data[:layers].to_json}

  var vectorSource = function(source){
    return new ol.source.Vector({
        format: new ol.format.GeoJSON(),
        url: function(extent) {
            extent = [-999000000, -999000000, 999000000, 999000000]
            return url + 'service=WFS&' + 'version=1.1.0&exceptions=application/json&format_options=CHARSET:ISO-8859-1&request=GetFeature&typename=' +
                source.featureType + '&' + 'outputFormat=' + outputFormat + '&srsname=' +
                srsName + '&bbox=' + extent.join(',') + ',' + srsName;
        }
    });

  }

  var layers = [
      new ol.layer.Tile({
          title: 'Street Map',
          group: "background",
          source: new ol.source.Stamen({
              layer: 'toner'
          })
      })
  ]
  $.each(layers_opts, function(i, e) {
      layers.push(
          new ol.layer.Image({
              title: e["name"],
              source: new ol.source.ImageVector({
                  source: vectorSource({'featurePrefix': e['workspace'], 'featureType': e['name']}),
                  style: new ol.style.Style({
                      stroke: new ol.style.Stroke({
                          color: 'rgba(0, 0, 255, 1.0)',
                          width: 2
                      }),
                      fill: new ol.style.Fill({
                          color: 'rgba(255, 255, 255, 0.6)'
                      })
                  })
              })
          })
      )
  })

  if (ol.Map.prototype.getLayer === undefined) {
    ol.Map.prototype.getLayer = function (id) {
        var layer;
        this.getLayers().forEach(function (lyr) {
            console.log(lyr.get('title'))
            if (id == lyr.get('title')) {
                layer = lyr;
            }
        });
        return layer;
    }
  }

  webix.ready(function(){
    var map = new ol.Map({
        controls: ol.control.defaults().extend([
            new app.LayersControl({
                groups: {
                    background: {
                        title: "Base layer",
                        exclusive: true
                    },
                    'default': {
                        title: "Imported layers"
                    }
                }
            })
        ]),
        target: document.getElementById('map'),
        renderer: 'canvas',
        layers: layers,
        view: new ol.View({
            center: ol.proj.fromLonLat(#{data[:coordinates].to_json}, new ol.proj.Projection({
                "code": srsName
            })),
            zoom: zoom,
            projection: srsName
        })
    });
    $('#map').data('map', map);
    $("#control_panel").appendTo(".ol-overlaycontainer");
  });